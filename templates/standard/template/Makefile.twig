{% if nodes['type.web.containerization.docker'] %}
.PHONY: build run stop rm composer-install composer-update bash-nginx bash-php phpunit phpstan

DOCKER_PROJECT_NAME?={{ nodes['name'].text }}
DOCKERFILE?=docker/prod/Dockerfile
COMPOSE_FILE?=docker/dev/docker-compose.yaml
TEST_COMPOSE_FILE?=docker/test/docker-compose.yaml

help:
	@echo ''
	@echo 'Usage:'
	@echo '  make [COMMAND]'
	@echo ''
	@echo 'Main application targets:'
	@echo '  build                              Build production image'
	@echo '  run                                Start all containers'
	@echo '  stop                               Stop all containers'
	@echo '  rm                                 Remove all containers'
	@echo '  pull                               Pull fresh images from registry'
	@echo '  ps                                 List running containers'
	@echo '  aio                                Run rm pull composer-install run sequential'
	@echo ''
	@echo 'Composer targets:'
	@echo '  composer-install                   Install required composer packages'
	@echo '  composer-update                    Update required composer packages'
{% if nodes['linter'] %}
	@echo ''
	@echo 'Run linting:'
	@echo '  lint'
	@echo '  lint-fix'
{% endif %}
{% if nodes['staticAnalyzer'] %}
	@echo ''
	@echo 'Run static analysis:'
	@echo '  analyze'
{% endif %}
{% if nodes['testing'] %}
	@echo ''
	@echo 'Run tests:'
	@echo '  test                               Run tests'
{% endif %}

build:
	docker build -t {{ nodes['name'].text }} -f ${DOCKERFILE} --no-cache .

pull:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} pull

run:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} up -d --build --remove-orphans

stop:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} stop

rm: stop
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} rm -f

ps:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} ps

composer-install:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} run --rm ${DOCKER_PROJECT_NAME} composer install

composer-update:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} run --rm ${DOCKER_PROJECT_NAME} composer update

bash-php:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${COMPOSE_FILE} exec ${DOCKER_PROJECT_NAME} bash
{% if nodes['linter'] %}

lint:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${TEST_COMPOSE_FILE} run --rm lint

lint-fix:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${TEST_COMPOSE_FILE} run --rm lint.fix
{% endif %}
{% if nodes['testing'] %}

test:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${TEST_COMPOSE_FILE} run --rm test
{% endif %}
{% if nodes['staticAnalyzer'] %}

analyze:
	docker-compose -p ${DOCKER_PROJECT_NAME} -f ${TEST_COMPOSE_FILE} run --rm analyze
{% endif %}

# Start environment like an all-in-one command
aio: rm pull composer-install run

{% endif %}
